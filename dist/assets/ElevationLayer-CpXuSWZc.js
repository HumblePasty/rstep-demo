const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./ElevationQuery-Ccrzd8hV.js","./index-CW6gHi3a.js","./index-C6GyxWqK.css"])))=>i.map(i=>d[i]);
import{mM as g,dg as _,cX as w,cY as V,c_ as T,mN as b,b as D,cD as S,U as c,mD as $,_ as d,x as y,c$ as x,r,o,cf as f,aQ as I,d5 as E,p as O}from"./index-CW6gHi3a.js";import{h as L}from"./WorkerHandle-D1iaXv3Z.js";class N{constructor(e,t,s,l){this._hasNoDataValues=null,this._minValue=null,this._maxValue=null,"pixelData"in e?(this.values=e.pixelData,this.width=e.width,this.height=e.height,this.noDataValue=e.noDataValue):(this.values=e,this.width=t,this.height=s,this.noDataValue=l)}get hasNoDataValues(){if(this._hasNoDataValues==null){const e=this.noDataValue;this._hasNoDataValues=this.values.includes(e)}return this._hasNoDataValues}get minValue(){return this._ensureBounds(),this._minValue}get maxValue(){return this._ensureBounds(),this._maxValue}_ensureBounds(){if(this._minValue!=null)return;const{noDataValue:e,values:t}=this;let s=1/0,l=-1/0,p=!0;for(const n of t)n===e?this._hasNoDataValues=!0:(s=n<s?n:s,l=n>l?n:l,p=!1);p?(this._minValue=0,this._maxValue=0):(this._minValue=s,this._maxValue=l>-3e38?l:0)}}class v extends L{constructor(e=null){super("LercWorker","_decode",{_decode:t=>[t.buffer]},e,{strategy:"dedicated"}),this.schedule=e,this.ref=0}decode(e,t,s){return e&&e.byteLength!==0?this.invoke({buffer:e,options:t},s):Promise.resolve(null)}release(){--this.ref<=0&&(u.forEach((e,t)=>{e===this&&u.delete(t)}),this.destroy())}}const u=new Map;function j(a=null){let e=u.get(a);return e||(a!=null?(e=new v(t=>a.immediate.schedule(t)),u.set(a,e)):(e=new v,u.set(null,e))),++e.ref,e}let i=class extends g(_(w(V(T(x))))){constructor(...a){super(...a),this.capabilities={operations:{supportsTileMap:!1}},this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=j()}normalizeCtorArgs(a,e){return typeof a=="string"?{url:a,...e}:a}destroy(){this._lercDecoder=b(this._lercDecoder)}readCapabilities(a,e){const t=e.capabilities&&e.capabilities.split(",").map(s=>s.toLowerCase().trim());return t?{operations:{supportsTileMap:t.includes("tilemap")}}:{operations:{supportsTileMap:!1}}}readVersion(a,e){let t=e.currentVersion;return t||(t=9.3),t}load(a){const e=a!=null?a.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:t=>{if(t.typeKeywords){for(let s=0;s<t.typeKeywords.length;s++)if(t.typeKeywords[s].toLowerCase()==="elevation 3d layer")return!0}throw new D("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},a).catch(S).then(()=>this._fetchImageService(e))),Promise.resolve(this)}fetchTile(a,e,t,s){const l=(s=s||{signal:null}).signal!=null?s.signal:s.signal=new AbortController().signal,p={responseType:"array-buffer",signal:l},n={noDataValue:s.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(a,e,t,s)).then(()=>c(this.getTileUrl(a,e,t),p)).then(h=>this._lercDecoder.decode(h.data,n,l)).then(h=>new N(h))}getTileUrl(a,e,t){const s=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,l=$({...this.parsedUrl.query,blankTile:!s&&null});return`${this.parsedUrl.path}/tile/${a}/${e}/${t}${l?"?"+l:""}`}async queryElevation(a,e){const{ElevationQuery:t}=await d(()=>import("./ElevationQuery-Ccrzd8hV.js"),__vite__mapDeps([0,1,2]),import.meta.url);return y(e),new t().query(this,a,e)}async createElevationSampler(a,e){const{ElevationQuery:t}=await d(()=>import("./ElevationQuery-Ccrzd8hV.js"),__vite__mapDeps([0,1,2]),import.meta.url);return y(e),new t().createSampler(this,a,e)}_fetchTileAvailability(a,e,t,s){return this.tilemapCache?this.tilemapCache.fetchAvailability(a,e,t,s):Promise.resolve("unknown")}async _fetchImageService(a){var s;if(this.sourceJSON)return this.sourceJSON;const e={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:a},t=await c(this.parsedUrl.path,e);t.ssl&&(this.url=(s=this.url)==null?void 0:s.replace(/^http:/i,"https:")),this.sourceJSON=t.data,this.read(t.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[m]}};r([o({readOnly:!0})],i.prototype,"capabilities",void 0),r([f("service","capabilities",["capabilities"])],i.prototype,"readCapabilities",null),r([o({json:{read:{source:"copyrightText"}}})],i.prototype,"copyright",void 0),r([o({readOnly:!0,type:I})],i.prototype,"heightModelInfo",void 0),r([o({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],i.prototype,"path",void 0),r([o({type:["show","hide"]})],i.prototype,"listMode",void 0),r([o({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],i.prototype,"minScale",void 0),r([o({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],i.prototype,"maxScale",void 0),r([o({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],i.prototype,"opacity",void 0),r([o({type:["ArcGISTiledElevationServiceLayer"]})],i.prototype,"operationalLayerType",void 0),r([o()],i.prototype,"sourceJSON",void 0),r([o({json:{read:!1},value:"elevation",readOnly:!0})],i.prototype,"type",void 0),r([o(E)],i.prototype,"url",void 0),r([o()],i.prototype,"version",void 0),r([f("version",["currentVersion"])],i.prototype,"readVersion",null),i=r([O("esri.layers.ElevationLayer")],i);const m=Symbol("default-fetch-tile");i.prototype.fetchTile[m]=!0;const U=i;export{U as default};
