import{r,mK as z,b0 as Q,kC as J,kl as V,kD as X,lK as Y,kE as Z,f5 as tt,mL as G}from"./index-BeW5XHHa.js";import{e as et,E as st,m as ot}from"./MapView-B_hC41MZ.js";import{t as it}from"./vec2f32-BbH2jxlN.js";import{r as rt}from"./vec3f32-nZdmKIgz.js";import{L as nt}from"./normalizeUtils-DYh0eGIs.js";import{n as at}from"./WGLContainer-CH7SreRT.js";import{t as pt,a as L,i as dt}from"./FeatureCommandQueue-nScKsV6u.js";import{j as lt,a as P,h as ht,G as ct,C as w,H as ut,l as ft,w as mt,b as k,g as a,m as q,I as vt,P as K,v as xt,t as yt,S as wt,e as gt}from"./UpdateTracking2D-BogUEfUf.js";import{I as A,O as _t,E as Mt,C as B}from"./enums-D9v74xTE.js";class I extends vt{}r([k(0,w)],I.prototype,"pos",void 0),r([k(1,w)],I.prototype,"uv",void 0);class $t extends xt{}class U extends K{}r([a(yt)],U.prototype,"dvs",void 0);class v extends K{}r([a(w)],v.prototype,"perspective",void 0),r([a(w)],v.prototype,"texSize",void 0),r([a(P)],v.prototype,"wrapAroundShift",void 0),r([a(P)],v.prototype,"opacity",void 0),r([a(wt)],v.prototype,"texture",void 0);class y extends lt{vertex(e){const t=e.uv.divide(this.config.texSize),s=new P(1).add(ht(t,this.config.perspective)),o=new ct(e.pos.add(new w(this.config.wrapAroundShift,0)),1),i=this.transform.dvs.multiply(o);return{uv:t,glPosition:new ut(i.xy.multiply(s),0,s)}}fragment(e){const t=ft(this.config.texture,e.uv).multiply(this.config.opacity),s=new mt;return s.glFragColor=t,s}}r([a(U)],y.prototype,"transform",void 0),r([a(v)],y.prototype,"config",void 0),r([z(0,q(I))],y.prototype,"vertex",null),r([z(0,q($t))],y.prototype,"fragment",null);let St=class extends pt{constructor(){super(...arguments),this.type=gt.Overlay,this._mesh=null,this.shaders={overlay:new y}}render(e,t){const{context:s,painter:o}=e,i=this._getMesh(e,t);o.setPipelineState(L);const{isWrapAround:p,wrapAroundShift:c}=t.config,u={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:u},defines:null,optionalAttributes:null,useComputeBuffer:!1};o.setPipelineState({...L,stencil:{write:!1,test:{compare:_t.EQUAL,op:{fail:A.KEEP,zFail:A.KEEP,zPass:A.REPLACE},ref:0,mask:255}}}),o.submitDrawMeshUntyped(s,f,i),p&&(u.wrapAroundShift=c,o.submitDrawMeshUntyped(s,f,i))}shutdown(){Q(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const o=this._mesh.vertexBuffers.get("positions");if(!o)throw new Error("Buffer not found");o.setData(t.position)}else{const o=t.index!=null?t.index.length:t.position.length/2;this._mesh=new dt(s,{vertex:{positions:t.position,uvs:t.tex},index:t.index!=null?{index:t.index}:void 0,groups:[{attributes:[{name:"pos",count:2,type:B.FLOAT,location:0,vertex:"positions",stride:8,offset:0},{name:"tex",count:2,type:B.UNSIGNED_SHORT,location:1,vertex:"uvs",stride:4,offset:0}],index:t.index!=null?"index":void 0,primitive:Mt.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:o}]})}return this._mesh}};class jt extends at{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=et(),this._overlayTechnique=new St}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==st.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:o,pixelRatio:i,resolution:p,rotation:c,viewpoint:u,displayMat3:f}=t;if(this._viewStateId===s)return;const g=G(c),d=i*o[0],m=i*o[1];this._localOrigin=u.targetGeometry.clone();const{x,y:$}=this._localOrigin,_=nt(x,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=$;const S=p*d,b=p*m,n=J(this._dvsMat3);V(n,n,f),X(n,n,it(d/2,m/2)),Y(n,n,rt(d/S,-m/b,1)),Z(n,n,-g),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:o,spatialReference:i,worldScreenWidth:p,size:c,viewpoint:u}=s,f=this._localOrigin;let g,d=0;const m=tt(i);if(m&&i.isWrappable){const x=c[0],$=c[1],_=G(o),S=Math.abs(Math.cos(_)),b=Math.abs(Math.sin(_)),n=Math.round(x*S+$*b),[C,D]=m.valid,l=ot(i),{x:T,y:W}=u.targetGeometry,F=[T,W],E=[0,0];s.toScreen(E,F);const M=[0,0];let O;O=n>p?.5*p:.5*n;const j=Math.floor((T+.5*l)/l),H=C+j*l,N=D+j*l,R=[E[0]+O,0];s.toMap(M,R),M[0]>N&&(d=l),R[0]=E[0]-O,s.toMap(M,R),M[0]<H&&(d=-l),g={worldWidth:l,xBounds:[C,D]}}for(const x of t)x.updateDrawCoords(f,d,i,g)}}export{jt as u};
