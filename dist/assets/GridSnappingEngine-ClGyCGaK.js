import{bV as X,al as E,h8 as U,d6 as F,h9 as Y,ha as h,w as D,aZ as I,hb as O,hc as G,hd as W,he as B,hf as V,r as a,o as u,p as H}from"./index-BlU5-B7d.js";import{o as K}from"./scaleUtils-m8RG2KAa.js";import{l as T,u as Z,t as _}from"./gridUtils-C_vfp4uH.js";let s=class extends X{constructor(e){super(e),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){var e;return(e=this.grid)!=null&&e.rotateWithMap?0:E(this.view.rotation??0)}get gridRotation(){var e;return E(((e=this.grid)==null?void 0:e.rotation)??0)}get gridCenter(){var t;const{spatialReference:e,grid:i}=this;if(!i||!e||!U(i.center.spatialReference,e))return null;try{const r=F(i.center,e),n=e.isWrappable&&((t=this.view)==null?void 0:t.center)!=null?Y(r.x,this.view.center.x,e):r.x;return h(n,r.y,r.z)}catch(r){return D.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",r),null}}get offsetScaleFactor(){const{pixelsPerStride:e,grid:i}=this;if(!i||!e)return 1;const{majorLineInterval:t,dynamicScaling:r}=i;return t<1?null:T(t,e,r)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:e}=this;return e?I(e.spacing,e.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:e}=this;return e==null?null:e*K(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:e}=this.view;return this.gridCenter?Z(this.gridCenter[0],this.gridCenter[1],e):null}get pixelsPerStride(){const{gridMetersPerStride:e,viewMetersPerPixel:i}=this;return i&&e?e/i:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(e,i,t){var p;const{options:r,view:n}=this;if(!(r!=null&&r.effectiveGridEnabled)||!n.grid||(p=t.feature)!=null&&p.attributes&&O in t.feature.attributes)return[];const o=t.coordinateHelper.arrayToPoint(e),l=r.distance*(t.pointer==="touch"?r.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(o,l)}fetchCandidatesSync(e,i){const t=[],{grid:r,effectiveViewRotation:n,gridRotation:o,gridCenter:l,viewMetersPerPixel:p,viewMetersPerSRUnit:g,offsetScaleFactor:w,spatialReference:f,gridMetersPerStride:b,pixelsPerStride:C}=this;if(!(r&&p&&g&&l&&f&&w&&b&&C)||!r.dynamicScaling&&C<_||!U(e.spatialReference,f))return t;const P=F(e,f),z=h(P.x,P.y,P.z),c=S(z,-o,l,-n),M=b/g*w,d=k(c,M,l),{shouldSnapX:v,shouldSnapY:y}=q(d,c,i,p,g);if(!v&&!y)return[];const L=h((v?d:c)[0],(y?d:c)[1]),R=S(L,o,l,n),$=S(d,o,l,n);if(y){const x=j(d,c,M,"y"),m=S(x,o,l,n);t.push(new G({lineStart:$,lineEnd:m,targetPoint:R,isDraped:!1}))}if(v){const x=j(d,c,M,"x"),m=S(x,o,l,n);t.push(new G({lineStart:$,lineEnd:m,targetPoint:R,isDraped:!1}))}return v&&y&&t.push(new W(R,t[0],t[1],!1)),t}};a([u({constructOnly:!0})],s.prototype,"view",void 0),a([u()],s.prototype,"options",void 0),a([u()],s.prototype,"grid",null),a([u()],s.prototype,"effectiveViewRotation",null),a([u()],s.prototype,"gridRotation",null),a([u()],s.prototype,"gridCenter",null),a([u()],s.prototype,"offsetScaleFactor",null),a([u()],s.prototype,"spatialReference",null),a([u()],s.prototype,"gridMetersPerStride",null),a([u()],s.prototype,"viewMetersPerPixel",null),a([u()],s.prototype,"viewMetersPerSRUnit",null),a([u()],s.prototype,"pixelsPerStride",null),a([u()],s.prototype,"updating",null),s=a([H("esri.views.interactive.snapping.GridSnappingEngine")],s);const S=(e,i,t,r)=>{const n=B(e[0],e[1],e[2]);return V(n,V(n,n,t,i),t,r)},k=(e,i,t)=>{const r=(e[0]-t[0])/i,n=(e[1]-t[1])/i,o=Math.trunc(r),l=Math.trunc(n),p=Math.round(r%1),g=Math.round(n%1),w=t[0]+(o+p)*i,f=t[1]+(l+g)*i;return h(w,f)},q=(e,i,t,r,n)=>{if(r<=0)return{shouldSnapX:!1,shouldSnapY:!1};const o=(e[0]-i[0])/r,l=(e[1]-i[1])/r;return{shouldSnapX:Math.abs(o*n)<t,shouldSnapY:Math.abs(l*n)<t}},j=(e,i,t,r)=>{if(r==="y"){const o=i[0]>e[0]?1:-1;return h(e[0]+t*o,e[1])}const n=i[1]>e[1]?1:-1;return h(e[0],e[1]+t*n)};export{s as GridSnappingEngine};
