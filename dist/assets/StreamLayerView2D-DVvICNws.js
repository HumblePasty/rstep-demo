import{r as s,m as n,jh as _,n as d,g as m,s as c,bD as g,j as f,a2 as l}from"./index-BeW5XHHa.js";import{n as v,r as S}from"./FeatureLayerView2D-Dx1u-A0B.js";import"./EffectView-B0dvKGY4.js";import"./featureConversionUtils-MXBZI-Ia.js";import"./OptimizedFeature-6cJ-QFG5.js";import"./OptimizedGeometry-BF8iz5FO.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./timeSupport-NbyKp46w.js";import"./LayerView2D-3plXM5Yn.js";import"./Container-D19wE-gu.js";import"./MapView-B_hC41MZ.js";import"./ColorBackground-BVKEg-ac.js";import"./Basemap-NADnrhTn.js";import"./loadAll-CXj3UdOi.js";import"./writeUtils-B7-V_fnF.js";import"./CollectionFlattener-DQyCU__2.js";import"./editableLayers-DTLxgvJL.js";import"./catalogUtils-DH9XeEkf.js";import"./basemapUtils-DslCIlfo.js";import"./TablesMixin-ST5f4_Kg.js";import"./TileInfo-BTHKGFgv.js";import"./TileKey-DZd6gJy7.js";import"./ReactiveMap-wjcNjhT8.js";import"./IViewEvents-Bci6PjlS.js";import"./a11yUtils-DxqE10Xh.js";import"./heightModelInfoUtils-BK4uhM0Y.js";import"./normalizeUtils-DYh0eGIs.js";import"./normalizeUtilsCommon-BkMUFFIb.js";import"./utils-qTUZr5IF.js";import"./utils-L8buF51K.js";import"./mat2df32-orApM5a3.js";import"./vec2f32-BbH2jxlN.js";import"./unitBezier-BX6NeAEr.js";import"./Tile-Cut57u45.js";import"./TileKey-pAO9G64c.js";import"./QueueProcessor-Bp8M3t1L.js";import"./quickselect-QQC62dOK.js";import"./definitions-DyYHcW4a.js";import"./HighlightDefaults-BXIAIksb.js";import"./enums-D9v74xTE.js";import"./Texture-BztuSTsV.js";import"./imageUtils-C8uYnyr3.js";import"./capabilities-DWNhET5Y.js";import"./accessibleHandler-BJnCRtTt.js";import"./GoTo-BE7pmK6A.js";import"./TechniqueInstance-BYTyQyJz.js";import"./UpdateTracking2D-BogUEfUf.js";import"./BindType-BmZEZMMh.js";import"./Util-CULiR2cx.js";import"./Program-DK6q0oy9.js";import"./BufferObject-CpFyAn1Z.js";import"./LabelMetric-C6LP7khp.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./BoundingBox-CnpCxTZE.js";import"./TileContainer-DXXoFn-F.js";import"./WGLContainer-CH7SreRT.js";import"./VertexArrayObject-B9crYmfD.js";import"./ProgramTemplate-CxLc3XLJ.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-Dj-ae2ep.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-nScKsV6u.js";import"./CIMSymbolHelper-DqPUnUH4.js";import"./BidiEngine-QXap_35O.js";import"./fontUtils-Bb3OjxCp.js";import"./GeometryUtils-BDbSVQr7.js";import"./Rect-CUzevAry.js";import"./constants-F8oTIn7N.js";import"./CircularArray-CujHzHWW.js";import"./featureReductionUtils-Caulfaw_.js";import"./SDFHelper-Dx6Y7DjY.js";import"./floatRGBA-OMcoUOQ5.js";import"./HighlightCounter-Czi-fdpx.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./popupUtils-Cly2tfcO.js";import"./LayerView-CT6BgBtC.js";import"./RefreshableLayerView-mNWqQh1P.js";const C=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([n()],t.prototype,"_isUserPaused",void 0),s([n({readOnly:!0})],t.prototype,"connectionStatus",null),s([n({type:_})],t.prototype,"filter",void 0),t=s([d("esri.views.layers.StreamLayerView")],t),t};let o=class extends C(S){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new c("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return g(e.map(i=>this.on(i,t)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(i=>i.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),a=this;return f(()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then(i=>i.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){var p,a,i;if(!((p=this.layer.timeInfo)!=null&&p.endField||(a=this.layer.timeInfo)!=null&&a.startField||(i=this.layer.timeInfo)!=null&&i.trackIdField))throw new c("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return v(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(y=>{const u=l.fromJSON(y);return u.features.forEach(h=>{h.layer=this.layer,h.sourceLayer=this.layer}),u}),new l({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([n()],o.prototype,"pipelineConnectionStatus",void 0),s([n()],o.prototype,"pipelineErrorString",void 0),s([n({readOnly:!0})],o.prototype,"connectionError",null),s([n({readOnly:!0})],o.prototype,"_streamConnectionStatus",null),o=s([d("esri.views.2d.layers.StreamLayerView2D")],o);const Je=o;export{Je as default};
