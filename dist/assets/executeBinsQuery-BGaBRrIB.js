import{P as f,ai as y,gT as c,U as S,V as l,eu as s,gY as m,ap as g,gP as R,bW as p}from"./index-CgLC99fU.js";import J from"./BinsQuery-Chn7FoEk.js";import"./queryUtils-CpQ3-t3m.js";import"./json-Wa8cmqdu.js";function N(a){const t=a.geometry,n=a.toJSON(),e=n;let i,r,o;return t!=null&&(r=t.spatialReference,o=s(r),e.geometryType=m(t),e.geometry=JSON.stringify(t),e.inSR=o),n.outSR?(e.outSR=s(n.outSR),i=a.outSpatialReference):t&&(e.outSR=e.inSR,i=r),e.bin&&(e.bin=JSON.stringify(e.bin)),e.quantizationParameters&&(e.quantizationParameters=JSON.stringify(e.quantizationParameters)),e.outStatistics&&(e.outStatistics=JSON.stringify(e.outStatistics)),e.outTimeReference&&(e.outTimeReference=JSON.stringify(e.outTimeReference)),a.defaultSpatialReference&&g(r,i)&&(e.defaultSR=e.inSR,delete e.inSR,delete e.outSR),e}async function O(a,t,n){return d(a,t,n)}async function d(a,t,n={}){const e=typeof a=="string"?f(a):a,i=t.geometry?[t.geometry]:[],r=await y(i,null,{signal:n.signal}),o=r==null?void 0:r[0];o!=null&&((t=t.clone()).geometry=o);const u=c({...e.query,f:"json",...N(t)});return S(l(e.path,"queryBins"),{...n,query:{...u,...n.query}})}async function $(a,t,n){const{data:e}=await O(R(a),J.from(t),n);return p.fromJSON(e)}export{$ as executeBinsQuery};
