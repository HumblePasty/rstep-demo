import{a9 as l,hA as u,hv as _,F as p,m as g,k as c,r as n,o as d,p as w}from"./index-BlU5-B7d.js";import{c as y,y as f,C as k,T as M,j as F,S as V,w as v}from"./Stop-bH-RVXwC.js";import{j as I}from"./LayerView2D-DepcyPir.js";import{t as G}from"./GraphicContainer-BzPjhdo4.js";import{F as H}from"./GraphicsView2D-Cjq3zD1N.js";import{y as C}from"./LayerView-5KheOswQ.js";import"./Container-CuFugdz6.js";import"./MapView-BK3e2pWI.js";import"./ColorBackground-DRP9oPtY.js";import"./Basemap-D4bTcViI.js";import"./editableLayers-CbuH9SGC.js";import"./catalogUtils-CO4vYFnm.js";import"./basemapUtils-wFzo5J9Z.js";import"./ReactiveMap-CUqMWS3j.js";import"./IViewEvents-Bci6PjlS.js";import"./a11yUtils-C6ywtmUW.js";import"./heightModelInfoUtils-DCLCjqwR.js";import"./mat2df32-orApM5a3.js";import"./vec2f32-BbH2jxlN.js";import"./unitBezier-BX6NeAEr.js";import"./Tile-CdifRvw6.js";import"./TileKey-C-u_wyf-.js";import"./QueueProcessor-WIKCPSQi.js";import"./quickselect-QQC62dOK.js";import"./definitions-DyYHcW4a.js";import"./HighlightDefaults-B-Ph5qh1.js";import"./enums-D9v74xTE.js";import"./Texture-DZtLfQ5W.js";import"./imageUtils-zEsx8KVg.js";import"./capabilities-DWNhET5Y.js";import"./accessibleHandler-zFSOQ_6I.js";import"./GoTo-D-GE-AdF.js";import"./EffectView-fQu7FQWt.js";import"./AGraphicContainer-B2XDWnpi.js";import"./TechniqueInstance-BcryAWy5.js";import"./UpdateTracking2D-DyqL17pU.js";import"./BindType-BmZEZMMh.js";import"./Util-BqVdeNU-.js";import"./Program-CTSmNKJz.js";import"./BufferObject-C_hurj1A.js";import"./LabelMetric-DtaZxmRz.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./BoundingBox-CnpCxTZE.js";import"./TileContainer-BmsMZTZT.js";import"./WGLContainer-CDbeM48o.js";import"./VertexArrayObject-36YtVcKY.js";import"./ProgramTemplate-rhI0Wyn5.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-DVOOffXA.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-CmmwO-4f.js";import"./CIMSymbolHelper-Cj5lGXGK.js";import"./BidiEngine-QXap_35O.js";import"./fontUtils-Bl5K0-wa.js";import"./GeometryUtils-BiC6UQBl.js";import"./Rect-CUzevAry.js";import"./constants-F8oTIn7N.js";import"./AttributeStore-BsnaUP_Z.js";import"./TimeOnly-BlBMiTev.js";import"./centroid-DdLmOD72.js";import"./queryUtils-AHf8tqPV.js";import"./json-Wa8cmqdu.js";import"./timeSupport-DMja1e1h.js";import"./normalizeUtilsSync-BiCRh14J.js";const U=["route-info","direction-line","direction-point","polygon-barrier","polyline-barrier","point-barrier","stop"],o={graphic:null,property:null,oldValue:null,newValue:null};function m(t){return t instanceof y||t instanceof f||t instanceof k||t instanceof M||t instanceof F||t instanceof V||t instanceof v}function $(t){return l.isCollection(t)&&t.length&&m(t.at(0))}function b(t){return Array.isArray(t)&&t.length>0&&m(t[0])}const A=new Set(["default"]);let a=class extends I(C){constructor(){super(...arguments),this._graphics=new l,this._highlightIds=new Map,this._networkFeatureMap=new Map,this._networkGraphicMap=new Map}get _routeItems(){return new u({getCollections:()=>this.layer==null||this.destroyed?[]:[this.layer.routeInfo!=null?new l([this.layer.routeInfo]):null,this.layer.directionLines,this.layer.directionPoints,this.layer.polygonBarriers,this.layer.polylineBarriers,this.layer.pointBarriers,this.layer.stops]})}initialize(){this._updatingHandles.addOnCollectionChange(()=>this._routeItems,t=>this._routeItemsChanged(t),_)}destroy(){var t;this._networkFeatureMap.clear(),this._networkGraphicMap.clear(),this._graphics.removeAll(),(t=this._get("_routeItems"))==null||t.destroy()}attach(){this._createGraphicsView()}detach(){this._destroyGraphicsView()}async fetchPopupFeaturesAtLocation(t,e){return this._graphicsView.hitTest(t).filter(({popupTemplate:i})=>!!i)}highlight(t){let e;e=m(t)?[this._getNetworkFeatureUid(t)]:b(t)?t.map(r=>this._getNetworkFeatureUid(r)):$(t)?t.map(r=>this._getNetworkFeatureUid(r)).toArray():[t.uid];const i=e.filter(p);return i.length?(this._addHighlight(i),g(()=>this._removeHighlight(i))):g()}async hitTest(t,e){if(this.suspended)return null;const i=this._graphicsView.hitTest(t).filter(p).map(s=>this._networkGraphicMap.get(s));if(!i.length)return null;const{layer:r}=this;return i.reverse().map(s=>({type:"route",layer:r,mapPoint:t,networkFeature:s}))}isUpdating(){return this._graphicsView.updating}moveEnd(){}update(t){this._graphicsView.processUpdate(t)}viewChange(){this._graphicsView.viewChange()}_addHighlight(t){for(const e of t)if(this._highlightIds.has(e)){const i=this._highlightIds.get(e);this._highlightIds.set(e,i+1)}else this._highlightIds.set(e,1);this._updateHighlight()}_createGraphic(t){const e=t.toGraphic();return e.layer=this.layer,e.sourceLayer=this.layer,e}_createGraphicsView(){const t=this.view,e=()=>this.requestUpdate(),i=new G(t.featuresTilingScheme);this._graphicsView=new H({container:i,graphics:this._graphics,requestUpdateCallback:e,view:t}),this.container.addChild(i),this._updateHighlight()}_destroyGraphicsView(){this.container.removeChild(this._graphicsView.container),this._graphicsView.destroy()}_getDrawOrder(t){const e=this._networkGraphicMap.get(t);return U.indexOf(e.type)}_getNetworkFeatureUid(t){return this._networkFeatureMap.has(t)?this._networkFeatureMap.get(t).uid:null}_removeHighlight(t){for(const e of t)if(this._highlightIds.has(e)){const i=this._highlightIds.get(e)-1;i===0?this._highlightIds.delete(e):this._highlightIds.set(e,i)}this._updateHighlight()}_routeItemsChanged(t){if(t.removed.length){this._graphics.removeMany(t.removed.map(e=>{const i=this._networkFeatureMap.get(e);return this._networkFeatureMap.delete(e),this._networkGraphicMap.delete(i),i}));for(const e of t.removed)this.removeHandles(e)}if(t.added.length){this._graphics.addMany(t.added.map(e=>{const i=this._createGraphic(e);return i.symbol==null?null:(this._networkFeatureMap.set(e,i),this._networkGraphicMap.set(i,e),i)}).filter(p));for(const e of t.added)this.addHandles([c(()=>e.geometry,(i,r)=>{this._updateGraphic(e,"geometry",i,r)}),c(()=>e.symbol,(i,r)=>{this._updateGraphic(e,"symbol",i,r)})],e);this._graphics.sort((e,i)=>this._getDrawOrder(e)-this._getDrawOrder(i))}}_updateGraphic(t,e,i,r){if(!this._networkFeatureMap.has(t)){const h=this._createGraphic(t);return this._networkFeatureMap.set(t,h),this._networkGraphicMap.set(h,t),void this._graphics.add(h)}const s=this._networkFeatureMap.get(t);s[e]=i,o.graphic=s,o.property=e,o.oldValue=r,o.newValue=i,this._graphicsView.graphicUpdateHandler(o)}_updateHighlight(){const t=Array.from(this._highlightIds.keys()),e=this._getHighlightBits(A);this._graphicsView.setHighlight(t.map(i=>({objectId:i,highlightFlags:e})))}};n([d()],a.prototype,"_graphics",void 0),n([d()],a.prototype,"_routeItems",null),a=n([w("esri.views.2d.layers.RouteLayerView2D")],a);const zt=a;export{zt as default};
