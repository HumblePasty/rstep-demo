import{K as p,b as m,$ as i}from"./index-CgLC99fU.js";import{p as n}from"./MeshVertexAttributes-T0T3bNUR.js";import{B as a}from"./vertexSpaceConversion-PwbQhWk2.js";import"./meshProperties-C4iW0Ukm.js";import"./spatialReferenceEllipsoidUtils-BekQvuZW.js";import"./computeTranslationToOriginAndRotation-CMd-9xj6.js";import"./vec3-Q4PGwLBT.js";import"./BufferView-BKbYOobq.js";import"./vec4-OIuo_mQV.js";async function A(t,e,r){await Promise.resolve(),p(r);const o=a(t,e,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!o)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const s=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),e);return s.transform=null,s}export{A as convertMeshVertexSpace};
