import{bP as G,bO as j,G as O,dU as V,dc as z,bm as P,dV as U,dW as Y,dX as E,dY as A,dZ as D}from"./index-iVlkrMet.js";import{$ as L}from"./utils-kssYlF8w.js";import{m as T,B as R}from"./utils-B-SYjl6m.js";let c=null;const Z=/^(?<hh>([0-1][0-9])|([2][0-3])):(?<mm>[0-5][0-9])(:(?<ss>[0-5][0-9]))?([.](?<ms>\d+))?$/;function _(t,e,o){return t.x<0?t.x+=e:t.x>o&&(t.x-=e),t}function k(t,e,o,s){const a=V(o)?z(o):null,m=a?Math.round((a.valid[1]-a.valid[0])/e.scale[0]):null;return t.map(i=>{const r=new P(i.geometry);return U(e,r,r),i.geometry=a?_(r,m??0,s[0]):r,i})}function q(t,e=18,o,s,a){const m=new Float64Array(s*a);e=Math.round(D(e));let i=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY;const N=Y(o);for(const{geometry:$,attributes:g}of t){const{x,y:u}=$,b=Math.max(0,x-e),M=Math.max(0,u-e),F=Math.min(a,u+e),w=Math.min(s,x+e),h=+N(g);for(let f=M;f<F;f++)for(let d=b;d<w;d++){const y=f*s+d,I=A(d-x,f-u,e)*h,l=m[y]+=I;i=Math.min(i,l),r=Math.max(r,l)}}return{min:i,max:r}}function B(t){const e=Z.exec(t);if(!e)return null;const{hh:o,mm:s,ss:a,ms:m}=e.groups;return Number(o)*E.hours+Number(s)*E.minutes+Number(a)*E.seconds+Number(m||0)}async function H(t,e,o=!0){if(!e)return[];const{field:s,field2:a,field3:m,fieldDelimiter:i,fieldInfos:r,timeZone:N}=t,$=s&&(r==null?void 0:r.find(l=>l.name.toLowerCase()===s.toLowerCase())),g=!!$&&G($),x=!!$&&L($),u=t.valueExpression,b=t.normalizationType,M=t.normalizationField,F=t.normalizationTotal,w=[],h=t.viewInfoParams;let f=null,d=null;if(u){if(!c){const{arcadeUtils:l}=await j();c=l}c.hasGeometryOperations(u)&&await c.enableGeometryOperations(),f=c.createFunction(u),d=h?c.getViewInfo({viewingMode:h.viewingMode,scale:h.scale,spatialReference:new O(h.spatialReference)}):null}const y=t.fieldInfos,I=!(e[0]&&"declaredClass"in e[0]&&e[0].declaredClass==="esri.Graphic")&&y?{fields:y}:null;return e.forEach(l=>{const p=l.attributes;let n;if(u){const v=I?{...l,layer:I}:l,C=c.createExecContext(v,d,N);n=c.executeFunction(f,C)}else p&&(n=p[s],a?(n=`${T(n)}${i}${T(p[a])}`,m&&(n=`${n}${i}${T(p[m])}`)):typeof n=="string"&&o&&(x?n=n?new Date(n).getTime():null:g&&(n=n?B(n):null)));if(b&&typeof n=="number"&&isFinite(n)){const v=p&&parseFloat(p[M]);n=R(n,b,v,F)}w.push(n)}),w}export{B as I,H as b,q as w,k as x};
