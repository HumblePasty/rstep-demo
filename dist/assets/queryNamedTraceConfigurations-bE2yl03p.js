import{a4 as f,r as i,m as u,n as l,Y as d}from"./index-CdlB_1jZ.js";import{f as y,s as N,i as h}from"./utils-C6_UxkSn.js";import{d as C}from"./WebMap-u3iYo64u.js";import"./ColorBackground-D1ULsJaW.js";import"./Basemap-C-l1VFzS.js";import"./loadAll-DJQRbLYI.js";import"./writeUtils-BpED38n7.js";import"./CollectionFlattener-DXYq1j4X.js";import"./editableLayers-DkMgipBa.js";import"./catalogUtils-CXc9Bdsq.js";import"./basemapUtils-C74MB7Dv.js";import"./TablesMixin-tb_nsbF-.js";import"./jsonContext-gDbq0fo5.js";import"./project-7YK4d_tY.js";import"./utils-BYArndnc.js";import"./NetworkElement-5hKIqbPh.js";let o=class extends f{constructor(s){super(s),this.namedTraceConfigurations=[]}};i([u({type:[C],json:{read:{source:"traceConfigurations"},write:{target:"traceConfigurations"}}})],o.prototype,"namedTraceConfigurations",void 0),o=i([l("esri.rest.networks.support.QueryNamedTraceConfigurationsResult")],o);const $=o;async function z(s,t,e){const a=y(s),r=t.toJSON();t.globalIds&&t.globalIds.length>0&&(r.globalIds=JSON.stringify(t.globalIds)),t.creators&&t.creators.length>0&&(r.creators=JSON.stringify(t.creators)),t.tags&&t.tags.length>0&&(r.tags=JSON.stringify(t.tags)),t.names&&t.names.length>0&&(r.names=JSON.stringify(t.names));const m={...r,f:"json"},n=N({...a.query,...m}),p=h(n,{...e,method:"post"}),g=`${a.path}/traceConfigurations/query`,{data:c}=await d(g,p);return $.fromJSON(c)}export{z as queryNamedTraceConfigurations};
