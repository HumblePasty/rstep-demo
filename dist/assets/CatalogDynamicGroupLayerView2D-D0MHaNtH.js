import{r as o,m as d,n as $,V as S,i9 as U,bD as I,j as _,kI as x,R as H,co as g}from"./index-CdlB_1jZ.js";import{j as O}from"./LayerView2D-Cm48yCIP.js";import{y as T}from"./LayerView-CBPi4mUl.js";import"./Container-Uoh4jaDK.js";import"./MapView-yTXyrQAB.js";import"./ColorBackground-D1ULsJaW.js";import"./Basemap-C-l1VFzS.js";import"./loadAll-DJQRbLYI.js";import"./writeUtils-BpED38n7.js";import"./CollectionFlattener-DXYq1j4X.js";import"./editableLayers-DkMgipBa.js";import"./catalogUtils-CXc9Bdsq.js";import"./basemapUtils-C74MB7Dv.js";import"./TablesMixin-tb_nsbF-.js";import"./TileInfo-D7e1w-ZU.js";import"./TileKey-DZd6gJy7.js";import"./ReactiveMap-BRPQi2qg.js";import"./IViewEvents-Bci6PjlS.js";import"./a11yUtils-Jh-oCjsl.js";import"./heightModelInfoUtils-DdsjbWes.js";import"./normalizeUtils-U2Ac8e-q.js";import"./normalizeUtilsCommon-NZz_4rsX.js";import"./utils-C6_UxkSn.js";import"./utils-BYArndnc.js";import"./mat2df32-orApM5a3.js";import"./vec2f32-BbH2jxlN.js";import"./unitBezier-BX6NeAEr.js";import"./Tile-D8AXtJJB.js";import"./TileKey-VlJgKBZa.js";import"./QueueProcessor-CtXkZibc.js";import"./quickselect-QQC62dOK.js";import"./definitions-DyYHcW4a.js";import"./HighlightDefaults-DFkqUXLX.js";import"./enums-D9v74xTE.js";import"./Texture-YJ5Ydbr7.js";import"./imageUtils-DlV4g_go.js";import"./capabilities-DWNhET5Y.js";import"./accessibleHandler-BE7PkFIl.js";import"./GoTo-DkJRpr0i.js";import"./EffectView-CHVSXY1g.js";const y=Symbol(),A=l=>{let r=class extends l{constructor(){super(...arguments),this.layerViews=new S,this._debouncedUpdate=U(async()=>{const{layer:e,parent:t}=this,a=t==null?void 0:t.footprintLayerView;let s=[];const p=this._createQuery();if(p&&a){const{features:u}=await a.queryFeatures(p);this.suspended||(s=u.map(h=>e.acquireLayer(h)))}this.removeHandles(y),this.addHandles(s,y)})}get creatingLayerViews(){var e;return((e=this.view)==null?void 0:e.layerViewManager.isCreatingLayerViewsForLayer(this.layer))??!1}isUpdating(){return this.creatingLayerViews||this.layer.updating||this.layerViews.some(e=>e.updating)}enableLayerUpdates(){return I([this._updatingHandles.addWhen(()=>{var e,t;return((t=(e=this.parent)==null?void 0:e.footprintLayerView)==null?void 0:t.dataUpdating)===!1},()=>this.updateLayers()),this._updatingHandles.add(()=>{var e,t,a,s,p;return[this.layer.maximumVisibleSublayers,(e=this.layer.parent)==null?void 0:e.orderBy,(a=(t=this.parent)==null?void 0:t.footprintLayerView)==null?void 0:a.filter,(p=(s=this.parent)==null?void 0:s.footprintLayerView)==null?void 0:p.timeExtent,this.suspended]},()=>this.updateLayers()),_(()=>this.removeHandles(y))])}updateLayers(){this.suspended?this.removeHandles(y):this._updatingHandles.addPromise(x(this._debouncedUpdate()).catch(e=>{H.getLogger(this).error(e)}))}_createQuery(){var V,v;const e=(V=this.parent)==null?void 0:V.footprintLayerView,t=(v=this.layer)==null?void 0:v.parent;if(!e||!t||t.destroyed)return null;const{layer:{maximumVisibleSublayers:a},view:{scale:s}}=this;if(!a)return null;const{itemTypeField:p,itemSourceField:u,itemNameField:h,minScaleField:c,maxScaleField:L,objectIdField:b,orderBy:w}=t,C=g(`${c} IS NULL OR ${s} <= ${c} OR ${c} = 0`,`${L} IS NULL OR ${s} >= ${L}`),n=w==null?void 0:w.find(m=>m.field&&!m.valueExpression),i=e.createQuery();if(i.returnGeometry=!1,i.num=a,i.outFields=[b,u,h],i.where=g(i.where,C),this.unsupportedItemTypes!=null){const m=`${p} NOT IN (${this.unsupportedItemTypes.map(F=>`'${F}'`)})`;i.where=g(i.where,m)}return n!=null&&n.field&&(i.orderByFields=[`${n.field} ${n.order==="descending"?"DESC":"ASC"}`],i.outFields.push(n.field)),i}};return o([d({readOnly:!0})],r.prototype,"creatingLayerViews",null),o([d()],r.prototype,"layer",void 0),o([d()],r.prototype,"layerViews",void 0),o([d({readOnly:!0})],r.prototype,"unsupportedItemTypes",void 0),o([d()],r.prototype,"parent",void 0),o([d({readOnly:!0})],r.prototype,"isUpdating",null),r=o([$("esri.views.layers.CatalogDynamicGroupLayerView")],r),r};let f=class extends A(O(T)){constructor(){super(...arguments),this.unsupportedItemTypes=["Scene Service"],this.layerViews=new S}attach(){this.addAttachHandles([this.layerViews.on("after-changes",()=>this._updateStageChildren()),this.enableLayerUpdates()])}detach(){this.container.removeAllChildren()}update(l){this.updateLayers()}viewChange(){}moveEnd(){this.requestUpdate()}_updateStageChildren(){this.container.removeAllChildren(),this.layerViews.forEach((l,r)=>this.container.addChildAt(l.container,r))}};f=o([$("esri.views.2d.layers.CatalogDynamicGroupLayerView2D")],f);const ve=f;export{ve as default};
